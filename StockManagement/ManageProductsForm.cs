using System;
using System.ComponentModel;
using System.Data.Entity;
using System.Drawing;
using System.Linq;
using System.Threading;
using System.Windows.Forms;
using DataModel;

namespace StockManagement
{
    public partial class ManageProductsForm : Form
    {
        private DataModel.DataModel _context;

        public ManageProductsForm()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            // Initialize DB context
            _context = new DataModel.DataModel();
            _context.Products.Load();
            _context.Warehouses.Load();

            productBindingSource.DataSource =
                _context.Products.Local.ToBindingList();

            // Add Price column
            var priceColumn = new DataGridViewTextBoxColumn();
            var cell = new DataGridViewPriceTextBoxCell();
            priceColumn.DataPropertyName = "Price";
            priceColumn.CellTemplate = cell;
            priceColumn.Name = "Price";
            priceColumn.HeaderText = "Price (£)";
            priceColumn.Width = 80;
            var grid = productDataGridView;
            grid.Columns.Insert(2, priceColumn);

            // Modify Warehouse column in Stocks grid
            var warehouseColumn = (DataGridViewComboBoxColumn)DataGridViewComboBoxColumn;
            warehouseColumn.DataPropertyName = "Warehouse_Id";
            warehouseColumn.DisplayMember = "Name";
            warehouseColumn.ValueMember = "Id";
            InitializeWarehouseDataSource();
        }

        private void productBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            Validate();

            foreach (var stock in _context.Stocks.Local.ToList())
            {
                if (stock.Product == null)
                {
                    _context.Stocks.Remove(stock);
                }

                if (stock.Warehouse == null)
                {
                    _context.Stocks.Remove(stock);
                }
            }

            // Removing placeholder warehouse
            var warehouse = _context.Warehouses.Find(0);
            _context.Warehouses.Remove(warehouse);

            // Save the changes to the database.
            _context.SaveChanges();

            // Reentering placeholder warehouse
            InitializeWarehouseDataSource();

            // Refresh the controls to show the values
            // that were generated by the database.
            stocksDataGridView.Refresh();
            productDataGridView.Refresh();

            // Update status label
            UpdateLabel("Saved!", Color.ForestGreen, true);
        }

        private void generalDataGridView_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            // Change occured, show it in label
            // Update status label
            UpdateLabel("State updated, save your changes", Color.DarkOrange);
        }

        private void productDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.ColumnIndex == productDataGridView.Columns["Price"].Index && e.Value != null)
            {
                var value = Double.Parse(e.Value.ToString());
                if (value > 500)
                {
                    var cell = productDataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex];
                    cell.Style.ForeColor = Color.Red;
                }
            }
        }

        private void ManageProductsForm_Shown(object sender, EventArgs e)
        {
            // Attach events to Products grid view
            productDataGridView.CellValueChanged +=
                generalDataGridView_CellValueChanged;
            productDataGridView.CellFormatting +=
                productDataGridView_CellFormatting;
            stocksDataGridView.CellValueChanged +=
                generalDataGridView_CellValueChanged;
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            _context.Dispose();
        }

        private void UpdateLabel(string text, Color color, bool flash = false)
        {
            Invoke((MethodInvoker) delegate
            {
                this.toolStripStatusLabel1.Text = text;
                this.toolStripStatusLabel1.ForeColor = color;
                this.statusStrip1.Refresh();

                if (flash)
                {
                    Thread.Sleep(1000);
                    this.toolStripStatusLabel1.Text = "";
                    this.statusStrip1.Refresh();
                }
            });
        }

        private void InitializeWarehouseDataSource()
        {
            var data = _context.Warehouses.Local.ToBindingList();
            data.Insert(0, new Warehouse { Id = 0, Name = "Select warehouse" });
            var warehouseColumn = DataGridViewComboBoxColumn;
            warehouseColumn.DataSource = data;
        }
    }
}